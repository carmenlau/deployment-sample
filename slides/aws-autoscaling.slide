Deploy Auto Scaling Group via CloudFormation in AWS
12 Apr 2019

Carmen Lau

* Infrastructure

.code aws-autoscaling/infrastructure.txt

* Benefit

- Support horizontal scaling from day one
- Reproducible Infrastructure
- Reduce downtime during deployment

* Overview

1. Create server machine image (Packer)
2. Setup server infrastructure (AWS CloudFormation)
3. Setup CI

* Create Machine Image (Packer)

*Tool*
.link https://www.packer.io/ Packer - a tools to build machine images

* Writing Packer Template

*Demonstration*

Create AMI from ubuntu image

.link https://github.com/carmenlau/deployment-sample/blob/master/autoscaling/packer/

* More about Packer Template

- About Packer template

.link https://www.packer.io/docs/templates/index.html

- More provisioners options

.link https://www.packer.io/docs/provisioners/shell.html

* Run packer

- IAM policies for running packer

.link https://www.packer.io/docs/builders/amazon.html#iam-task-or-instance-role

- Run packer with template
    AWS_ACCESS_KEY_ID=<id> \
        AWS_SECRET_ACCESS_KEY=<key> \
        packer build ami.json

* Setup server infrastructure (AWS CloudFormation)

AWS CloudFormation - describe and provision all the infrastructure resources in your cloud environment

We are going to use AWS CloudFormation to deploy a stateless autoscaling group.

.code aws-autoscaling/infrastructure.txt

* Create CloudFormation template from aws

- Find CloudFormation sample templates
.link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-sample-templates.html

- The template that we used in the demo
.link https://s3-ap-southeast-1.amazonaws.com/cloudformation-templates-ap-southeast-1/AutoScalingRollingUpdates.template

* Demonstration

Overview

    - Parameters
    - Resources
        - AutoScalingGroup
        - LaunchConfig
        - ApplicationLoadBalancer
        - ALBListener
        - ALBTargetGroup
        - ScalingPolicy
        - Alarm
        - InstanceSecurityGroup
    - Outputs

Demonstration

.link https://github.com/carmenlau/deployment-sample/blob/master/autoscaling/AutoScalingRollingUpdates.template

* Configure server to pull the latest code when start

1. Create docker-compose.override.yml to specify the sever docker image
2. Call the start app script to pull start start the docker image, and check if the server is ready
3. Send success signal to CloudFormation to indicate the EC2 is ready

* Update template - Config cloud-init via user data

Use cloud-init installed in the ec2 image by providing cloud config in user data
.link https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html

Cloud config

1. write_files
2. runcmd
3. ssh_authorized_keys

.link https://cloudinit.readthedocs.io/en/latest/topics/examples.html More cloud config example

* Update docker image via CI

    AWS_ACCESS_KEY_ID=<id> \
        AWS_SECRET_ACCESS_KEY=<key> \
        aws cloudformation update-stack --region <region> --stack-name <stack_name> \
            --role-arn arn:aws:iam::<project_id>:role/<role_name> \
            --capabilities CAPABILITY_IAM \
            --use-previous-template \
            --parameters \
            ParameterKey=VpcId,UsePreviousValue=true \
            ParameterKey=Subnets,UsePreviousValue=true \
            ParameterKey=InstanceType,UsePreviousValue=true \
            ParameterKey=KeyName,UsePreviousValue=true \
            ParameterKey=ImageName,ParameterValue=<new_docker-image-name> \
            ParameterKey=AMIID,UsePreviousValue=true \
            ParameterKey=DeployEnv,UsePreviousValue=true \
            ParameterKey=SSHLocation,UsePreviousValue=true
