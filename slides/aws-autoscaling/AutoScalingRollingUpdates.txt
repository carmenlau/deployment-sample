{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation Sample Template AutoScalingRollingUpdates: Create a load balanced, Auto Scaled sample website. This example creates an Auto Scaling group behind a load balancer with a simple health check. The AutoScaling launch configuration includes an update policy that will keep 2 instances running while doing an autoscaling rolling upgrade. **WARNING** This template creates one or more Amazon EC2  instances and an Application Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
  
    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    // 1 OMIT
    "ImageName": {
      "Description": "Image Name",
      "Type": "String"
    },

    "AMIID": {
      "Description": "AMI ID",
      "Type": "String"
    },

    "DeployEnv": {
      "Description": "Deploy environment, can be staging or production",
      "Type": "String"
    }
    // 2 OMIT
  },

  "Resources": {
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": { "Ref": "AMIID" },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "InstanceType": { "Ref": "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" :["", [
          "#cloud-config\n",
          "write_files:\n",
          "- encoding: b64\n",
          "  content: ",
          { "Fn::Base64" : { "Fn::Join" : ["\n", [
            "version: '3'",
            "",
            "services:",
            "  web:",
            { "Fn::Join" : ["", [ "    image: ", { "Ref": "ImageName" } ]]}
          ]]}}, "\n",
          "  path: /home/ubuntu/myapp/docker-compose.override.yml\n",
          "  owner: ubuntu\n",
          "  group: ubuntu\n",
          "  permissions: '0644'\n",
          "runcmd:\n",
          "  - set -e\n",
          "  - timeout 300 /home/ubuntu/myapp/startapp.sh", "\n",
          "  - cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource WebServerGroup ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "ssh_authorized_keys:\n",
          "  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3oBUleIqhAyCIugF6UA/IM2J5CCcTHcHyCiX2MO3p60ekpeyPw61Av9TWm+grNWxVyEQKLQ8jaVaF+qgzzcoYAXZiLASU+JonC1Wp5/yJ77cWsT/At/I7PsJG8WMWc6+8D03HVkU/Ic9gEhN3sbO25ipgBxQv6Dd2RI0OttWJALNATtLsApCwbe4PIEVLOA8a1rdFucaURkwg0+Ehz8d3Mty6+hoLGzYDVFaSerJtRJLUJCGNbeDfHjpkqOEK611JEnJIVwxp8E22Wy00R/atbt8+DO0Ax2jYkSVYQDzwf6QsX02m0UmFnP3DxPhuJ4sVeNKr8oCTLVorBdBj+wJJ\n"
      ]]}}
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MaxBatchSize" : "1",
          "MinInstancesInService" : "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "1",
        "MaxSize": "4",
        "TargetGroupARNs": [ { "Ref": "ALBTargetGroup" } ],
        "Tags" : [ {
          "Key" : "Name",
          "Value" : { "Fn::Join" : ["", [ "myapp-", { "Ref": "DeployEnv" } ]]},
          "PropagateAtLaunch" : "true"
        } ]
      }
    },

    // 3 OMIT
    "ScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
         "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
         "Cooldown" : "300",
         "ScalingAdjustment" : "1"
      }
    },
    // 4 OMIT
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
         "EvaluationPeriods": "1",
         "Statistic": "Average",
         "Threshold": "80",
         "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
         "Period": "60",
         "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
         "Namespace": "AWS/EC2",
         "Dimensions": [ {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
         } ],
         "ComparisonOperator": "GreaterThanThreshold",
         "MetricName": "CPUUtilization"
      }
    },
    // 5 OMIT

   "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
         "AdjustmentType" : "ChangeInCapacity",
         "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
         "Cooldown" : "300",
         "ScalingAdjustment" : "-1"
      }
   },

   "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
         "EvaluationPeriods": "1",
         "Statistic": "Average",
         "Threshold": "30",
         "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
         "Period": "60",
         "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
         "Namespace": "AWS/EC2",
         "Dimensions": [ {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
         } ],
         "ComparisonOperator": "LessThanThreshold",
         "MetricName": "CPUUtilization"
      }
   },

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"}
      }
    },
  
    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },
  
    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the configured port",
        "SecurityGroupIngress": [ 
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref" : "SSHLocation" } },
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    }
  },

  "Outputs": {
    "URL": {
      "Description": "URL of the website",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ] } ] ] }
    }
  }
}
